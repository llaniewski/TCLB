<?R
	source("conf.R")
	c_header();

	source("lib/feq.R")
	source("lib/boundary.R")

	U = as.matrix(Density[Density$group=='W',c("dx","dy")])

    S = PV("S")
    I = PV("I")
    R = PV("R")

	Ws = PV(Density[Density$group=='W',"name"])
	W = PV("W")

	EQ = MRT_eq(U, rho=W, J=c(0,0,0), ortogonal=FALSE)
?>

#define pi 3.141592653589793116

CudaDeviceFunction real_t getSuspect()   { return S; }
CudaDeviceFunction real_t getInfected()  { return I; }
CudaDeviceFunction real_t getRecovered() { return R; }
CudaDeviceFunction real_t getSpread()    { return <?R C(sum(Ws)) ?>; }

CudaDeviceFunction float2 Color() {
        float2 ret;
        ret.x = I;
        ret.y = 1;
        return ret;
}

CudaDeviceFunction void Init() {
    R = Immunisation;
    I = InitInfected;
    S = 1 - I - R;
    <?R C(Ws, 0) ?>
}

<?R
	bounce = merge(
        cbind( U,i=1:nrow(U)),
        cbind(-U,j=1:nrow(U))
    )
    bounce = bounce[bounce$i < bounce$j,]
    tmp = PV("tmp");
    BB = function(val = 1) {
        cat("real_t tmp;\n")
        cat(paste0(
            ToC(tmp),          " = ", ToC(Ws[bounce$i]*val),"; ",
            ToC(Ws[bounce$i]), " = ", ToC(Ws[bounce$j]*val),"; ",
            ToC(Ws[bounce$j]), " = ", ToC(tmp),             ";"
        ),sep="\n")
    }
?>


CudaDeviceFunction void WallD() { <?R BB(-1) ?> }

CudaDeviceFunction void WallN() { <?R BB() ?> }

CudaDeviceFunction void Run() {
    switch (NodeType & NODE_COLLISION) {
        case NODE_WallD: WallD(); break;
        case NODE_WallN: WallN(); break;
        case NODE_MRT:   CollisionMRT(); break;
    }
}

CudaDeviceFunction void CollisionMRT()
{
<?R
    omega = PV("omega")
	R = PV("R", 1:nrow(U)-1);
	selR = EQ$order > 0
	R[!selR] = EQ$Req[!selR]
?>
	real_t <?R C(R,sep=",") ?>;
    real_t omega;
    omega = SpreadRadius*SpreadRadius*SpreadRate*0.125;
    omega = 1.0 - 1.0/(3.0*omega + 0.5);
<?R
	C( R, Ws %*% EQ$mat );
	C( R[selR], (R - EQ$Req)[selR]);
	C( R[selR], (R * omega)[selR]);
?>
    real_t ViralLoad = W - MinimalViralLoad;
    if (ViralLoad < 0) ViralLoad = 0;
    real_t Infections = InfectionRate * S * ViralLoad;
    real_t Recoveries = RecoveryRate * I;
    real_t SpreadRelaxation = SpreadRate * (I-W);
    W = W + SpreadRelaxation;
    S = S - Infections;
    I = I + Infections - Recoveries;
    R = R + Recoveries;
<?R
    C( R[selR], (R + EQ$Req)[selR]);
	C( Ws, R %*% solve(EQ$mat) );
?>
}

